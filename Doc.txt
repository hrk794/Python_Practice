4.7

It is posssible to define functions using with a variable number of arguments.
There are three forms, which can be combined.

1.  The most useful is to specify a default value for one or more arguments.

Important: 
The default value is evaluated only once. This makes a differnce when the default is mutable object such as a list, dictionary, or instances of most classes. 
Thus, the default value is evaluated when the function is called for the first time; if it the argument is mutable, and its value is changed within the body of the function, the new value continues to exist even when the function has been completely executed and is evaluated when the function is called for the next time instead of the default value.

2. Functions can also be called using keyword arguments of the form kwarg=value. 

Important:
All keyword arguments must follow the positional arguments. All keyword arguments passed must match one of the arguments accepted by the function; their order is not important.

The final formal parameter of the form **name provides the fuction with a dictionary. This may be combined with a formal parameter of the form *name  which receives a tuple containing the positional arguments beyond the formal parameter list. The Python3 Tutorial for Python 3.7.1 claims that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call. My experience with Python 3.5.2 is not so.

3. Function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple . Before the variable number of arguments, zero or more normal arguments may occur. The notation is *args. 

Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the *args parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather than positional arguments. see arbit_arg_list.py

4. When the arguments are already in a list or tuple, they need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple. See unpack_arg_lists.py. Similary ** is used to unpack dictionary entries as keyword arguments. See unpack_arg_dicts.py.

5. Lambda Functions: Small anonymous functions can be created with the lambda keyword. This function returns the sum of its two arguments: lambda a, b: a+b. Lambda functions can be used wherever function objects are required. They are syntactically restricted to a single expression. Semantically, they are just syntactic sugar for a normal function definition. Like nested function definitions, lambda functions can reference variables from the containing scope.

6. Documentation strings: The first line should always be a short, concise summary of the object’s purpose. For brevity, it should not explicitly state the object’s name or type. This line should begin with a capital letter and end with a period. If there are more lines in the documentation string, the second line should be blank, visually separating the summary from the rest of the description. The following lines should be one or more paragraphs describing the object’s calling conventions, its side effects, etc. Some more detail sabout indentation in the docstrings are found on the page pointed to by the following link.

Read more at https://docs.python.org/3/tutorial/controlflow.html#documentation-strings

7. Function annotations are completely optional metadata information about the types used by user-defined. Annotations are stored in the __annotations__ attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal ->, followed by an expression, between the parameter list and the colon denoting the end of the def statement. 


***********************************************************************************************************************************************************************


5. Data Structures


5.1 More on Lists

Here are all of the methods of list objects:

list.append(x)
Add an item to the end of the list. Equivalent to a[len(a):] = [x].

list.extend(iterable)
Extend the list by appending all the items from the iterable. Equivalent to a[len(a):] = iterable.

list.insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to insert, so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

list.remove(x)
Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

list.pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, a.pop() removes and returns the last item in the list. (The square brackets around the i in the method signature denote that the parameter is optional, not that you should type square brackets at that position. You will see this notation frequently in the Python Library Reference.)

list.clear()
Remove all items from the list. Equivalent to del a[:].

list.index(x[, start[, end]])
Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.

The optional arguments start and end are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the start argument.

list.count(x)
Return the number of times x appears in the list.

list.sort(key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).

list.reverse()
Reverse the elements of the list in place.

list.copy()
Return a shallow copy of the list. Equivalent to a[:].

See list_methods.py


