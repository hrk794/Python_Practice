4.7

It is posssible to define functions using with a variable number of arguments.
There are three forms, which can be combined.

1.  The most useful is to specify a default value for one or more arguments.

Important: 
The default value is evaluated only once. This makes a differnce when the default is mutable object such as a list, dictionary, or instances of most classes. 
Thus, the default value is evaluated when the function is called for the first time; if it the argument is mutable, and its value is changed within the body of the function, the new value continues to exist even when the function has been completely executed and is evaluated when the function is called for the next time instead of the default value.

2. Functions can also be called using keyword arguments of the form kwarg=value. 

Important:
All keyword arguments must follow the positional arguments. All keyword arguments passed must match one of the arguments accepted by the function; their order is not important.

The final formal parameter of the form **name provides the fuction with a dictionary. This may be combined with a formal parameter of the form *name  which receives a tuple containing the positional arguments beyond the formal parameter list. The Python3 Tutorial for Python 3.7.1 claims that the order in which the keyword arguments are printed is guaranteed to match the order in which they were provided in the function call. My experience with Python 3.5.2 is not so.

3. Function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple . Before the variable number of arguments, zero or more normal arguments may occur. The notation is *args. 

Normally, these variadic arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the *args parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather than positional arguments. see arbit_arg_list.py

4. When the arguments are already in a list or tuple, they need to be unpacked for a function call requiring separate positional arguments. For instance, the built-in range() function expects separate start and stop arguments. If they are not available separately, write the function call with the *-operator to unpack the arguments out of a list or tuple. See unpack_arg_lists.py. Similary ** is used to unpack dictionary entries as keyword arguments. See unpack_arg_dicts.py.





